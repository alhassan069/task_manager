---
description: 
globs: 
alwaysApply: true
---
# üßæ Product Requirements Document (PRD): Natural Language Task Manager

---

## üìå 1. Overview

The Task Manager app allows users to create, manage, and visualize tasks by inputting them in natural language. Tasks are parsed to extract key components like task name, assignee, due date/time, and priority, and displayed in a project-grouped UI.

---

## üë§ 2. User Flow

1. Visit Landing Page
2. Register or Login via Email/Password
3. Create a Project
4. Inside a Project:

   * Enter a natural language task (e.g., *"Call client Rajeev tomorrow by 5pm"*)
   * View the parsed task in a list UI
   * Edit task details inline

---

## üß© 3. Functional Requirements

### 3.1 Authentication

* Email/password-based registration & login
* No third-party OAuth or magic links

### 3.2 Project Management

* Users can create, edit, and delete multiple projects
* Projects are **shareable**, but no role-based access needed
* Fields:

  * `name`
  * `description` (optional)
  * `created_at`

### 3.3 Task Input & NLP Parsing

* Users input tasks via a **free-text field**
* Parsing is powered by **OpenAI GPT-4 API**
* Extracted Fields:

  * `task` (Task Name)
  * `assigned_to` (Match registered user or keep as string if no match)
  * `due_date` (absolute or relative: "tomorrow", "next Monday", etc.)
  * `priority` (P1 if marked urgent/critical, else default to **P3**)
* Only one task per input
* Re-parsing option in case of error

### 3.4 Task List Display

* Grouped by **project**
* Flat **list view**
* No Kanban or drag-and-drop support
* Fields shown:

  * Task
  * Assignee
  * Due Date & Time
  * Priority

### 3.5 Task Editing

* **Inline editing** of all task fields
* Reassignment to different users or text
* Immediate update on the frontend (optimistic UI)

### 3.6 NLP & AI Integration

* Use **OpenAI API (GPT-4)** for:

  * Parsing tasks
  * Inferring priority level when terms like "urgent" are used
* In case of failure:

  * Fallback to manual input form for all fields

---

## üõ†Ô∏è 4. Technical Specifications

### 4.1 Tech Stack

| Layer    | Stack                                       |
| -------- | ------------------------------------------- |
| Frontend | Next.js + Tailwind CSS                      |
| Backend  | Next.js (APIs)                              |
| Database | PostgreSQL (production), SQLite (dev/local) |
| Hosting  | Vercel (frontend + backend if supported)    |
| AI/NLP   | OpenAI GPT-4 API                            |

### 4.2 API Contracts (Examples)

**POST /parse-task**

```json
{
  "input": "Finish landing page Aman by 11pm 20th June"
}
```

**Response**

```json
{
  "task": "Finish landing page",
  "assigned_to": "Aman",
  "due_date": "2025-06-20T23:00:00.000Z",
  "priority": "P3"
}
```

---

## üö´ 5. Not Included (for MVP)

* Notifications or reminders
* Recurring tasks
* Kanban view or drag-and-drop
* Role-based access
* Bulk task creation
* Comments or attachments

---

## ‚úÖ 6. Acceptance Criteria

* [ ] Users can register/login using email/password
* [ ] Users can create/share multiple projects
* [ ] Users can add tasks using natural language
* [ ] AI parses task details (task, assignee, date/time, priority)
* [ ] Tasks are listed under correct project
* [ ] Inline editing is functional
* [ ] Fallback form shows if AI fails to parse
* [ ] Assignee field accepts plain text if no user match
* [ ] Tasks default to priority P3 if not specified

---
