---
description: 
globs: 
alwaysApply: true
---
# MoSCoW Phased Development Plan for NLP Task Manager

---

## Phase 1: Must Have (Core MVP Backend + Frontend Setup)

**Goal:** Get a minimal working system with user registration, login, project creation, and adding simple tasks (without NLP parsing yet).

### Backend

1. Setup Node.js + Express project with TypeScript (if using)
2. Initialize database schema for Users, Projects, Tasks (basic fields)
3. Setup JWT-based authentication (register, login APIs)
4. Create API endpoint to create a new project
5. Create API endpoint to list projects for the logged-in user
6. Create API endpoint to add a task (accept raw text, save with default priority P3, no parsing yet)
7. Create API endpoint to list tasks for a given project
8. Create API endpoint to update a task (PATCH)
9. Create API endpoint to delete a task with confirmation
10. Setup error handling middleware

### Frontend

1. Setup React + Tailwind + ShadCN UI base
2. Create landing page with Login and Register forms
3. Implement authentication flow using JWT (login, store token, logout)
4. Create Dashboard page to list user’s projects and create new projects
5. Create Project page UI with:
   - Task input field (simple add)
   - Task list (display raw tasks)
   - Inline edit of task fields
   - Delete task with confirmation modal
6. Handle API calls to backend for above functionalities
7. Implement routing with React Router
8. Add basic form validations and error displays

---

## Phase 2: Should Have (NLP Parsing + Assignee & Priority Handling)

**Goal:** Enhance task creation to parse natural language input and assign structured fields.

### Backend

1. Integrate OpenAI GPT-4-turbo API for parsing task input
2. Create new API endpoint `/tasks/nlp` to receive natural language task text and return parsed JSON fields
3. Implement logic to validate assignee against registered users
4. Apply default priority `P3` if not specified in NLP output
5. Update Task creation API to accept parsed fields and save accordingly
6. Enhance task listing API to show parsed fields properly
7. Handle parsing failures gracefully and return error messages

### Frontend

1. Update “Add Task” input to send raw natural language input to NLP API
2. Display parsed task fields immediately after creation
3. Show error messages on NLP parsing failure
4. Add priority dropdown/select in inline edit UI
5. Add assignee autocomplete dropdown that fetches registered users
6. Display default priority if none specified

---

## Phase 3: Could Have (Project Sharing + Search & Filters)

**Goal:** Add collaborative read-only access and task filtering features.

### Backend

1. Create API to invite users to a project (read-only)
2. Create middleware to restrict invited users to read-only access on projects
3. Add search & filter APIs for tasks (filter by assignee, priority, due date)
4. Implement sorting of tasks by due date in API or frontend

### Frontend

1. UI for inviting users by email to project (read-only access)
2. Display collaborators in project view (read-only badge)
3. Add search box and filter dropdowns above task list
4. Implement filtering and sorting UI behaviors
5. Handle read-only user UI restrictions (disable add/edit/delete for collaborators)

---

## Phase 4: Won't Have (For Now / Stretch Goals)

- Email verification & password reset flows
- Recurring tasks
- Notifications or reminders
- Task comments or activity logs
- Mobile responsive UI (desktop-only MVP)
- Undo delete feature

---

# Recommended Model for NLP Parsing Task

- Use **OpenAI GPT-4 Turbo** for NLP task input parsing (fast and cost-effective)
- Input prompt designed to extract these fields from natural language:
  - Task name
  - Assignee (validate as registered user)
  - Due date/time (Indian timezone)
  - Priority (default P3)

---

# Summary

| Phase | Description                       | Key Deliverables                          |
|-------|---------------------------------|------------------------------------------|
| 1     | Setup basic auth, projects, tasks| JWT auth, CRUD projects, add/view tasks  |
| 2     | Add NLP parsing & task structuring| GPT-4 turbo NLP integration, parsed tasks|
| 3     | Project sharing & task filters   | Collaborators read-only, search & filters|
| 4     | Stretch goals                   | Not in MVP scope                          |

---
